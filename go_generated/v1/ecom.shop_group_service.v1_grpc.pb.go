// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: v1/ecom.shop_group_service.v1.proto

package shop_groups_contracts_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShopGroup_GetShopGroupByShopCode_FullMethodName      = "/ecom.shop_group_service.v1.ShopGroup/GetShopGroupByShopCode"
	ShopGroup_GetShopGroupByFiasId_FullMethodName        = "/ecom.shop_group_service.v1.ShopGroup/GetShopGroupByFiasId"
	ShopGroup_GetConsumerShops_FullMethodName            = "/ecom.shop_group_service.v1.ShopGroup/GetConsumerShops"
	ShopGroup_Export_FullMethodName                      = "/ecom.shop_group_service.v1.ShopGroup/Export"
	ShopGroup_ImportFile_FullMethodName                  = "/ecom.shop_group_service.v1.ShopGroup/ImportFile"
	ShopGroup_GenerateVirtualGroups_FullMethodName       = "/ecom.shop_group_service.v1.ShopGroup/GenerateVirtualGroups"
	ShopGroup_ProcessFailedMessages_FullMethodName       = "/ecom.shop_group_service.v1.ShopGroup/ProcessFailedMessages"
	ShopGroup_GetFailedMessages_FullMethodName           = "/ecom.shop_group_service.v1.ShopGroup/GetFailedMessages"
	ShopGroup_GetShopGroups_FullMethodName               = "/ecom.shop_group_service.v1.ShopGroup/GetShopGroups"
	ShopGroup_GetAllShopGroups_FullMethodName            = "/ecom.shop_group_service.v1.ShopGroup/GetAllShopGroups"
	ShopGroup_GetShops_FullMethodName                    = "/ecom.shop_group_service.v1.ShopGroup/GetShops"
	ShopGroup_GetShopGroupByShopGroupCode_FullMethodName = "/ecom.shop_group_service.v1.ShopGroup/GetShopGroupByShopGroupCode"
)

// ShopGroupClient is the client API for ShopGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopGroupClient interface {
	GetShopGroupByShopCode(ctx context.Context, in *GetShopGroupByShopCodeRequest, opts ...grpc.CallOption) (*GetShopGroupByShopCodeResponse, error)
	GetShopGroupByFiasId(ctx context.Context, in *GetShopGroupByFiasIdRequest, opts ...grpc.CallOption) (*GetShopGroupByFiasIdResponse, error)
	GetConsumerShops(ctx context.Context, in *GetConsumerShopsRequest, opts ...grpc.CallOption) (*ShopGroupsResponse, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (ShopGroup_ExportClient, error)
	ImportFile(ctx context.Context, in *ImportFileRequest, opts ...grpc.CallOption) (*ImportFileResponse, error)
	GenerateVirtualGroups(ctx context.Context, in *GenerateVirtualGroupsRequest, opts ...grpc.CallOption) (*GenerateVirtualGroupsResponse, error)
	ProcessFailedMessages(ctx context.Context, in *ProcessFailedMessagesRequest, opts ...grpc.CallOption) (*ProcessFailedMessagesResponse, error)
	GetFailedMessages(ctx context.Context, in *GetFailedMessagesRequest, opts ...grpc.CallOption) (*GetFailedMessagesResponse, error)
	GetShopGroups(ctx context.Context, in *GetShopGroupsRequest, opts ...grpc.CallOption) (*GetShopGroupsResponse, error)
	GetAllShopGroups(ctx context.Context, in *GetAllShopGroupsRequest, opts ...grpc.CallOption) (*GetAllShopGroupsResponse, error)
	GetShops(ctx context.Context, in *GetShopsRequest, opts ...grpc.CallOption) (*GetShopsResponse, error)
	GetShopGroupByShopGroupCode(ctx context.Context, in *GetShopGroupByShopGroupCodeRequest, opts ...grpc.CallOption) (*GetShopGroupByShopGroupCodeResponse, error)
}

type shopGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewShopGroupClient(cc grpc.ClientConnInterface) ShopGroupClient {
	return &shopGroupClient{cc}
}

func (c *shopGroupClient) GetShopGroupByShopCode(ctx context.Context, in *GetShopGroupByShopCodeRequest, opts ...grpc.CallOption) (*GetShopGroupByShopCodeResponse, error) {
	out := new(GetShopGroupByShopCodeResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetShopGroupByShopCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetShopGroupByFiasId(ctx context.Context, in *GetShopGroupByFiasIdRequest, opts ...grpc.CallOption) (*GetShopGroupByFiasIdResponse, error) {
	out := new(GetShopGroupByFiasIdResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetShopGroupByFiasId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetConsumerShops(ctx context.Context, in *GetConsumerShopsRequest, opts ...grpc.CallOption) (*ShopGroupsResponse, error) {
	out := new(ShopGroupsResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetConsumerShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (ShopGroup_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopGroup_ServiceDesc.Streams[0], ShopGroup_Export_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopGroupExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopGroup_ExportClient interface {
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type shopGroupExportClient struct {
	grpc.ClientStream
}

func (x *shopGroupExportClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopGroupClient) ImportFile(ctx context.Context, in *ImportFileRequest, opts ...grpc.CallOption) (*ImportFileResponse, error) {
	out := new(ImportFileResponse)
	err := c.cc.Invoke(ctx, ShopGroup_ImportFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GenerateVirtualGroups(ctx context.Context, in *GenerateVirtualGroupsRequest, opts ...grpc.CallOption) (*GenerateVirtualGroupsResponse, error) {
	out := new(GenerateVirtualGroupsResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GenerateVirtualGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) ProcessFailedMessages(ctx context.Context, in *ProcessFailedMessagesRequest, opts ...grpc.CallOption) (*ProcessFailedMessagesResponse, error) {
	out := new(ProcessFailedMessagesResponse)
	err := c.cc.Invoke(ctx, ShopGroup_ProcessFailedMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetFailedMessages(ctx context.Context, in *GetFailedMessagesRequest, opts ...grpc.CallOption) (*GetFailedMessagesResponse, error) {
	out := new(GetFailedMessagesResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetFailedMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetShopGroups(ctx context.Context, in *GetShopGroupsRequest, opts ...grpc.CallOption) (*GetShopGroupsResponse, error) {
	out := new(GetShopGroupsResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetShopGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetAllShopGroups(ctx context.Context, in *GetAllShopGroupsRequest, opts ...grpc.CallOption) (*GetAllShopGroupsResponse, error) {
	out := new(GetAllShopGroupsResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetAllShopGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetShops(ctx context.Context, in *GetShopsRequest, opts ...grpc.CallOption) (*GetShopsResponse, error) {
	out := new(GetShopsResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopGroupClient) GetShopGroupByShopGroupCode(ctx context.Context, in *GetShopGroupByShopGroupCodeRequest, opts ...grpc.CallOption) (*GetShopGroupByShopGroupCodeResponse, error) {
	out := new(GetShopGroupByShopGroupCodeResponse)
	err := c.cc.Invoke(ctx, ShopGroup_GetShopGroupByShopGroupCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopGroupServer is the server API for ShopGroup service.
// All implementations must embed UnimplementedShopGroupServer
// for forward compatibility
type ShopGroupServer interface {
	GetShopGroupByShopCode(context.Context, *GetShopGroupByShopCodeRequest) (*GetShopGroupByShopCodeResponse, error)
	GetShopGroupByFiasId(context.Context, *GetShopGroupByFiasIdRequest) (*GetShopGroupByFiasIdResponse, error)
	GetConsumerShops(context.Context, *GetConsumerShopsRequest) (*ShopGroupsResponse, error)
	Export(*ExportRequest, ShopGroup_ExportServer) error
	ImportFile(context.Context, *ImportFileRequest) (*ImportFileResponse, error)
	GenerateVirtualGroups(context.Context, *GenerateVirtualGroupsRequest) (*GenerateVirtualGroupsResponse, error)
	ProcessFailedMessages(context.Context, *ProcessFailedMessagesRequest) (*ProcessFailedMessagesResponse, error)
	GetFailedMessages(context.Context, *GetFailedMessagesRequest) (*GetFailedMessagesResponse, error)
	GetShopGroups(context.Context, *GetShopGroupsRequest) (*GetShopGroupsResponse, error)
	GetAllShopGroups(context.Context, *GetAllShopGroupsRequest) (*GetAllShopGroupsResponse, error)
	GetShops(context.Context, *GetShopsRequest) (*GetShopsResponse, error)
	GetShopGroupByShopGroupCode(context.Context, *GetShopGroupByShopGroupCodeRequest) (*GetShopGroupByShopGroupCodeResponse, error)
	mustEmbedUnimplementedShopGroupServer()
}

// UnimplementedShopGroupServer must be embedded to have forward compatible implementations.
type UnimplementedShopGroupServer struct {
}

func (UnimplementedShopGroupServer) GetShopGroupByShopCode(context.Context, *GetShopGroupByShopCodeRequest) (*GetShopGroupByShopCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopGroupByShopCode not implemented")
}
func (UnimplementedShopGroupServer) GetShopGroupByFiasId(context.Context, *GetShopGroupByFiasIdRequest) (*GetShopGroupByFiasIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopGroupByFiasId not implemented")
}
func (UnimplementedShopGroupServer) GetConsumerShops(context.Context, *GetConsumerShopsRequest) (*ShopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerShops not implemented")
}
func (UnimplementedShopGroupServer) Export(*ExportRequest, ShopGroup_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedShopGroupServer) ImportFile(context.Context, *ImportFileRequest) (*ImportFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFile not implemented")
}
func (UnimplementedShopGroupServer) GenerateVirtualGroups(context.Context, *GenerateVirtualGroupsRequest) (*GenerateVirtualGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVirtualGroups not implemented")
}
func (UnimplementedShopGroupServer) ProcessFailedMessages(context.Context, *ProcessFailedMessagesRequest) (*ProcessFailedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFailedMessages not implemented")
}
func (UnimplementedShopGroupServer) GetFailedMessages(context.Context, *GetFailedMessagesRequest) (*GetFailedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedMessages not implemented")
}
func (UnimplementedShopGroupServer) GetShopGroups(context.Context, *GetShopGroupsRequest) (*GetShopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopGroups not implemented")
}
func (UnimplementedShopGroupServer) GetAllShopGroups(context.Context, *GetAllShopGroupsRequest) (*GetAllShopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShopGroups not implemented")
}
func (UnimplementedShopGroupServer) GetShops(context.Context, *GetShopsRequest) (*GetShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShops not implemented")
}
func (UnimplementedShopGroupServer) GetShopGroupByShopGroupCode(context.Context, *GetShopGroupByShopGroupCodeRequest) (*GetShopGroupByShopGroupCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopGroupByShopGroupCode not implemented")
}
func (UnimplementedShopGroupServer) mustEmbedUnimplementedShopGroupServer() {}

// UnsafeShopGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopGroupServer will
// result in compilation errors.
type UnsafeShopGroupServer interface {
	mustEmbedUnimplementedShopGroupServer()
}

func RegisterShopGroupServer(s grpc.ServiceRegistrar, srv ShopGroupServer) {
	s.RegisterService(&ShopGroup_ServiceDesc, srv)
}

func _ShopGroup_GetShopGroupByShopCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopGroupByShopCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetShopGroupByShopCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetShopGroupByShopCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetShopGroupByShopCode(ctx, req.(*GetShopGroupByShopCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetShopGroupByFiasId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopGroupByFiasIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetShopGroupByFiasId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetShopGroupByFiasId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetShopGroupByFiasId(ctx, req.(*GetShopGroupByFiasIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetConsumerShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetConsumerShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetConsumerShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetConsumerShops(ctx, req.(*GetConsumerShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopGroupServer).Export(m, &shopGroupExportServer{stream})
}

type ShopGroup_ExportServer interface {
	Send(*ExportResponse) error
	grpc.ServerStream
}

type shopGroupExportServer struct {
	grpc.ServerStream
}

func (x *shopGroupExportServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopGroup_ImportFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).ImportFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_ImportFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).ImportFile(ctx, req.(*ImportFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GenerateVirtualGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVirtualGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GenerateVirtualGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GenerateVirtualGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GenerateVirtualGroups(ctx, req.(*GenerateVirtualGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_ProcessFailedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFailedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).ProcessFailedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_ProcessFailedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).ProcessFailedMessages(ctx, req.(*ProcessFailedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetFailedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetFailedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetFailedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetFailedMessages(ctx, req.(*GetFailedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetShopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetShopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetShopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetShopGroups(ctx, req.(*GetShopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetAllShopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetAllShopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetAllShopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetAllShopGroups(ctx, req.(*GetAllShopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetShops(ctx, req.(*GetShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopGroup_GetShopGroupByShopGroupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopGroupByShopGroupCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopGroupServer).GetShopGroupByShopGroupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopGroup_GetShopGroupByShopGroupCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopGroupServer).GetShopGroupByShopGroupCode(ctx, req.(*GetShopGroupByShopGroupCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopGroup_ServiceDesc is the grpc.ServiceDesc for ShopGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecom.shop_group_service.v1.ShopGroup",
	HandlerType: (*ShopGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShopGroupByShopCode",
			Handler:    _ShopGroup_GetShopGroupByShopCode_Handler,
		},
		{
			MethodName: "GetShopGroupByFiasId",
			Handler:    _ShopGroup_GetShopGroupByFiasId_Handler,
		},
		{
			MethodName: "GetConsumerShops",
			Handler:    _ShopGroup_GetConsumerShops_Handler,
		},
		{
			MethodName: "ImportFile",
			Handler:    _ShopGroup_ImportFile_Handler,
		},
		{
			MethodName: "GenerateVirtualGroups",
			Handler:    _ShopGroup_GenerateVirtualGroups_Handler,
		},
		{
			MethodName: "ProcessFailedMessages",
			Handler:    _ShopGroup_ProcessFailedMessages_Handler,
		},
		{
			MethodName: "GetFailedMessages",
			Handler:    _ShopGroup_GetFailedMessages_Handler,
		},
		{
			MethodName: "GetShopGroups",
			Handler:    _ShopGroup_GetShopGroups_Handler,
		},
		{
			MethodName: "GetAllShopGroups",
			Handler:    _ShopGroup_GetAllShopGroups_Handler,
		},
		{
			MethodName: "GetShops",
			Handler:    _ShopGroup_GetShops_Handler,
		},
		{
			MethodName: "GetShopGroupByShopGroupCode",
			Handler:    _ShopGroup_GetShopGroupByShopGroupCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _ShopGroup_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/ecom.shop_group_service.v1.proto",
}

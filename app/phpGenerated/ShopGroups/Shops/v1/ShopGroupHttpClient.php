<?php

/**
 * This file is generated by architect.
 */

namespace ShopGroups\Shops\v1;

use ShopGroups\HttpClientErrorObjects\UnprocessableEntityException;
use ShopGroups\HttpClientErrorObjects\UnresolvedRequestException;
use Spiral\RoadRunner\GRPC\ContextInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class ShopGroupHttpClient implements ShopGroupInterface
{
    public const ERROR_CODES_MATCHES_CLASSES = [422 => 'ShopGroups\HttpClientErrorObjects\UnprocessableEntityException'];

    private HttpClientInterface $client;
    private string $host;


    public function __construct(HttpClientInterface $client, string $host)
    {
        if ($client instanceof \ApiPlatform\Symfony\Bundle\Test\Client) {
            putenv('RR_MODE=http');
        }
        $this->client = $client;

        $this->host = rtrim($host, "/");
    }


    public function GetShopGroupByShopCode(
        ContextInterface $ctx,
        GetShopGroupByShopCodeRequest $in,
    ): GetShopGroupByShopCodeResponse {
        $result = $this->client->request("GET", $this->host."/api/v1/consumer/".$in->getConsumerCode()."/getShopGroupByShopCode/".$in->getUfXmlId()."", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetShopGroupByShopCodeResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetShopGroupByFiasId(
        ContextInterface $ctx,
        GetShopGroupByFiasIdRequest $in,
    ): GetShopGroupByFiasIdResponse {
        $result = $this->client->request("GET", $this->host."/api/v1/shop-group/by-fias-id/".$in->getFiasId()."", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetShopGroupByFiasIdResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetConsumerShops(ContextInterface $ctx, GetConsumerShopsRequest $in): ShopGroupsResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/consumer/".$in->getConsumerCode()."/shops", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\ShopGroupsResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function Export(ContextInterface $ctx, ExportRequest $in): ExportResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/export", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\ExportResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function ImportFile(ContextInterface $ctx, ImportFileRequest $in): ImportFileResponse
    {
        $result = $this->client->request("POST", $this->host."/api/v1/import", [
        "body"=>$in->serializeToJsonString(),
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json",
        "Content-type"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\ImportFileResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GenerateVirtualGroups(
        ContextInterface $ctx,
        GenerateVirtualGroupsRequest $in,
    ): GenerateVirtualGroupsResponse {
        $result = $this->client->request("POST", $this->host."/api/v1/generate_virtual_groups", [
        "body"=>$in->serializeToJsonString(),
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json",
        "Content-type"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GenerateVirtualGroupsResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function ProcessFailedMessages(
        ContextInterface $ctx,
        ProcessFailedMessagesRequest $in,
    ): ProcessFailedMessagesResponse {
        $result = $this->client->request("POST", $this->host."/api/v1/messenger/process-failed", [
        "body"=>$in->serializeToJsonString(),
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json",
        "Content-type"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\ProcessFailedMessagesResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetFailedMessages(ContextInterface $ctx, GetFailedMessagesRequest $in): GetFailedMessagesResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/messenger/get-failed", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetFailedMessagesResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetShopGroups(ContextInterface $ctx, GetShopGroupsRequest $in): GetShopGroupsResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/shop-groups", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetShopGroupsResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetAllShopGroups(ContextInterface $ctx, GetAllShopGroupsRequest $in): GetAllShopGroupsResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/all-shop-groups", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetAllShopGroupsResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetShops(ContextInterface $ctx, GetShopsRequest $in): GetShopsResponse
    {
        $result = $this->client->request("GET", $this->host."/api/v1/shops", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetShopsResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    public function GetShopGroupByShopGroupCode(
        ContextInterface $ctx,
        GetShopGroupByShopGroupCodeRequest $in,
    ): GetShopGroupByShopGroupCodeResponse {
        $result = $this->client->request("GET", $this->host."/api/v1/shop-group-by-shop-group-code", [
        "headers"=>array_merge($ctx->getValues(), [
        "Accept"=>"application/json"
        ])
        ]);

        try {
            $resultString = $result->getContent();
        } catch (\Throwable $e) {
            $this->throwError(json_decode($e->getResponse()->getContent(false), true), $e->getCode());
        }
        if ($result->getStatusCode()===200) {
            return new \ShopGroups\Shops\v1\GetShopGroupByShopGroupCodeResponse(json_decode($resultString, true));
        } else {
            $this->throwError(json_decode($resultString, true), $result->getStatusCode());
        }
    }


    private function throwError(array $response, int $httpCode)
    {
        if (isset(self::ERROR_CODES_MATCHES_CLASSES[$httpCode])) {
            $exceptionClass = self::ERROR_CODES_MATCHES_CLASSES[$httpCode];
            $exception = new $exceptionClass();
            foreach ($response as $key=>$value) {
                if (property_exists($exception, $key)) {
                    $exception->$key = $value;
                }
            }
            throw $exception;
        } else {
            $exception = new UnresolvedRequestException();
            $exception->httpCode = $httpCode;
            $exception->error = $response;
            throw $exception;
        }
    }
}

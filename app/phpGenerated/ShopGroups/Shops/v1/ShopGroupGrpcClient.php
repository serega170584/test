<?php

/**
 * This file is generated by architect.
 */

namespace ShopGroups\Shops\v1;

use Spiral\RoadRunner\GRPC\ContextInterface;

class ShopGroupGrpcClient implements ShopGroupInterface
{
    private ShopGroupClient $client;


    public function __construct(ShopGroupClient $client)
    {
        $this->client = $client;
    }


    public function GetShopGroupByShopCode(
        ContextInterface $ctx,
        GetShopGroupByShopCodeRequest $in,
    ): GetShopGroupByShopCodeResponse {
        return $this->client->GetShopGroupByShopCode($in, $ctx)[1];
    }


    public function GetShopGroupByFiasId(
        ContextInterface $ctx,
        GetShopGroupByFiasIdRequest $in,
    ): GetShopGroupByFiasIdResponse {
        return $this->client->GetShopGroupByFiasId($in, $ctx)[1];
    }


    public function GetConsumerShops(ContextInterface $ctx, GetConsumerShopsRequest $in): ShopGroupsResponse
    {
        return $this->client->GetConsumerShops($in, $ctx)[1];
    }


    public function Export(ContextInterface $ctx, ExportRequest $in): ExportResponse
    {
        return $this->client->Export($in, $ctx)[1];
    }


    public function ImportFile(ContextInterface $ctx, ImportFileRequest $in): ImportFileResponse
    {
        return $this->client->ImportFile($in, $ctx)[1];
    }


    public function GenerateVirtualGroups(
        ContextInterface $ctx,
        GenerateVirtualGroupsRequest $in,
    ): GenerateVirtualGroupsResponse {
        return $this->client->GenerateVirtualGroups($in, $ctx)[1];
    }


    public function ProcessFailedMessages(
        ContextInterface $ctx,
        ProcessFailedMessagesRequest $in,
    ): ProcessFailedMessagesResponse {
        return $this->client->ProcessFailedMessages($in, $ctx)[1];
    }


    public function GetFailedMessages(ContextInterface $ctx, GetFailedMessagesRequest $in): GetFailedMessagesResponse
    {
        throw new \Exception("This method doesnt work via grpc");
    }


    public function GetShopGroups(ContextInterface $ctx, GetShopGroupsRequest $in): GetShopGroupsResponse
    {
        return $this->client->GetShopGroups($in, $ctx)[1];
    }


    public function GetAllShopGroups(ContextInterface $ctx, GetAllShopGroupsRequest $in): GetAllShopGroupsResponse
    {
        return $this->client->GetAllShopGroups($in, $ctx)[1];
    }


    public function GetShops(ContextInterface $ctx, GetShopsRequest $in): GetShopsResponse
    {
        return $this->client->GetShops($in, $ctx)[1];
    }


    public function GetShopGroupByShopGroupCode(
        ContextInterface $ctx,
        GetShopGroupByShopGroupCodeRequest $in,
    ): GetShopGroupByShopGroupCodeResponse {
        return $this->client->GetShopGroupByShopGroupCode($in, $ctx)[1];
    }
}

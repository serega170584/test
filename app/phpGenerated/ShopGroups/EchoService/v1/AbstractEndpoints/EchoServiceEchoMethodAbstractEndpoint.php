<?php

/**
 * This file is generated by architect.
 */

namespace ShopGroups\EchoService\v1\AbstractEndpoints;

abstract class EchoServiceEchoMethodAbstractEndpoint
{
	public const GRPC_INTERFACE_NAME = 'ShopGroups\EchoService\v1\EchoServiceInterface';
	public const GRPC_INTERFACE_METHOD_NAME = 'EchoMethod';
	public const GRPC_INTERFACE_REALIZATION = '\ShopGroups\EchoService\v1\InnerGrpcControllers\EchoServiceInnerController';
	public const GRPC_INPUT_TYPE = '\ShopGroups\EchoService\v1\EchoRequest';
	public const GRPC_OUTPUT_TYPE = '\ShopGroups\EchoService\v1\EchoResponse';
	public const GRPC_ROUTE = 'echo.v1.EchoService.EchoMethod';

	public array $context;
	private array $preInterceptors = [];
	private array $postInterceptors = [];


	public function addPreInterceptor(\Test\PhpServicesBundle\PreInterceptorInterface $interceptor)
	{
		$this->preInterceptors[] = $interceptor;
	}


	public function addPostInterceptor(\Test\PhpServicesBundle\PostInterceptorInterface $interceptor)
	{
		$this->postInterceptors[] = $interceptor;
	}


	public function __invoke(\ShopGroups\EchoService\v1\EchoRequest $dto): \ShopGroups\EchoService\v1\EchoResponse
	{
		foreach ($this->preInterceptors as $interceptor) {
		    /** @var \Test\PhpServicesBundle\PreInterceptorInterface $interceptor */
		      $interceptor->intercept($this->context, $dto);
		}
		$result = $this->run($dto);
		foreach ($this->postInterceptors as $interceptor) {
		    /** @var \Test\PhpServicesBundle\PostInterceptorInterface $interceptor */
		      $interceptor->intercept($this->context, $result, $result);
		}
		return $result;
	}


	abstract protected function run(\ShopGroups\EchoService\v1\EchoRequest $dto): \ShopGroups\EchoService\v1\EchoResponse;
}

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/UseCases/Command/*/*Command.php'
            - '../src/UseCases/Query/*/*Query.php'
            - '../src/DTO/'

# todo вынести bus в пакет
    _instanceof:
        Test\PhpServicesBundle\Bus\CommandHandlerBase:
            tags:
                - { name: messenger.message_handler, bus: messenger.bus.commands }

        Test\PhpServicesBundle\Bus\QueryHandlerBase:
            tags:
                - { name: messenger.message_handler, bus: messenger.bus.queries }

    Test\PhpServicesBundle\Bus\MessengerBus:
        arguments:
            $messageCommandsBus: '@messenger.bus.commands'
            $messageQueriesBus: '@messenger.bus.queries'

    url.client:
        class: GuzzleHttp\Client
        arguments:
            $config:
                base_uri: '%env(URL_ADDRESS)%'
                connect_timeout: '%env(URL_CONNECT_TIMEOUT)%'
                timeout: '%env(URL_TIMEOUT)%'

    App\ApiResource\URLProvider:
        public: true
        arguments:
            $client: '@url.client'

    App\Repository\DoctrineFailedMessagesRepository:
        arguments:
            $failedTransport: '@messenger.transport.failed'

    App\Repository\FailedMessagesRepository: '@App\Repository\DoctrineFailedMessagesRepository'

    Test\PhpServicesBundle\Metrics\MetricsCollector\HttpMetricsCollector:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: 'start', priority: 100000 }
            - { name: kernel.event_listener, event: kernel.terminate, method: 'stop', priority: -100000 }

    Test\PhpServicesBundle\Metrics\MetricsCollector\GrpcMetricsCollector:
        tags:
            - { name: kernel.event_listener, event: Test\PhpServicesBundle\Event\GrpcBeforeInvokeServiceMethodEvent, method: 'start', priority: 100000 }
            - { name: kernel.event_listener, event: Test\PhpServicesBundle\Event\GrpcAfterInvokeServiceMethodEvent, method: 'stop', priority: -100000 }

    App\Service\ConsumerResolver:
        arguments:
            $minDistrIosVersion: '%env(MIN_DISTR_IOS_VERSION)%'
            $minDistrAndroidVersion: '%env(MIN_DISTR_ANDROID_VERSION)%'
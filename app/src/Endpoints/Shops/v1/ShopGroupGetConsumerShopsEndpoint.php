<?php

/**
 * This file is generated by architect.
 */

namespace App\Endpoints\Shops\v1;

use App\Bus\BusManager;
use App\DTO\Response\ShopsByShopGroupItem;
use App\UseCase\Query\GetShopsGroupedByShopGroupCode\GetShopsGroupedByShopGroupCodeQuery;
use App\ValueObject\ConsumerCode;
use Test\PhpServicesBundle\GrpcAttributes\GrpcService;
use Test\PhpServicesBundle\MessageValidationInterceptor;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\Parameter;
use OpenApi\Attributes\Response;
use ShopGroups\Shops\v1\AbstractEndpoints\ShopGroupGetConsumerShopsAbstractEndpoint;
use ShopGroups\Shops\v1\GetConsumerShopsRequest;
use ShopGroups\Shops\v1\ShopGroupItem;
use ShopGroups\Shops\v1\ShopGroupsResponse;
use Symfony\Component\Routing\Annotation\Route;

class ShopGroupGetConsumerShopsEndpoint extends ShopGroupGetConsumerShopsAbstractEndpoint
{
    public function __construct(
        private readonly BusManager $busManager,
    ) {
    }

    #[GrpcService]
    #[Route('/api/v1/consumer/{ConsumerCode}/shops', methods: ['GET'])]
    #[MessageValidationInterceptor]
    #[Parameter(name: 'ConsumerCode', in: 'path')]
    #[Response(
        response: 200,
        description: 'OK',
        content: new JsonContent(example: '{"Items":[{"Code":"","ShopsCodes":["str1","str2"]},{"Code":"","ShopsCodes":["str1","str2"]}]}'),
    )]
    #[Response(
        response: 422,
        description: '',
        content: new JsonContent(example: '{"title":"Validation Error","detail":["some field is incorrect","some field is incorrect also"]}'),
    )]
    protected function run(GetConsumerShopsRequest $dto): ShopGroupsResponse
    {
        $response = $this->busManager->askGetShopsGroupedByShopGroupCodeQuery(
            new GetShopsGroupedByShopGroupCodeQuery(
                new ConsumerCode($dto->getConsumerCode()),
                $dto->getShopGroupCode(),
                $dto->getRecursive()
            )
        );

        return new ShopGroupsResponse(
            [
                'Items' => array_map(
                    static fn (ShopsByShopGroupItem $item) => new ShopGroupItem([
                        'Code' => $item->shopGroupCode,
                        'ShopsCodes' => $item->shopsCodes,
                    ]),
                    $response->items
                ),
            ]
        );
    }
}

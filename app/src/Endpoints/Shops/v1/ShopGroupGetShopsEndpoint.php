<?php

/**
 * This file is generated by architect.
 */

namespace App\Endpoints\Shops\v1;

use App\Bus\BusManager;
use App\Entity\RelationshipOfStoreGroupsToShopEntity;
use App\UseCase\Query\GetShops\GetShopsQuery;
use Test\PhpServicesBundle\GrpcAttributes\GrpcService;
use Test\PhpServicesBundle\MessageValidationInterceptor;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\Parameter;
use OpenApi\Attributes\Response;
use ShopGroups\Shops\v1\AbstractEndpoints\ShopGroupGetShopsAbstractEndpoint;
use ShopGroups\Shops\v1\GetShopsRequest;
use ShopGroups\Shops\v1\GetShopsResponse;
use ShopGroups\Shops\v1\ShopModel;
use Symfony\Component\Routing\Annotation\Route;

class ShopGroupGetShopsEndpoint extends ShopGroupGetShopsAbstractEndpoint
{
    public function __construct(
        private readonly BusManager $busManager,
    ) {
    }

    #[GrpcService]
    #[Route('/api/v1/shops', methods: ['GET'])]
    #[Parameter(name: 'shopGroupCode', description: 'Код группы магазинов (виртуальная группа)', in: 'query', required: true, example: 'shop_group_location_1')]
    #[MessageValidationInterceptor]
    #[Response(
        response: 200,
        description: 'OK',
        content: new JsonContent(example: '{"items":[{"code":"123456"},{"code":"654321"}]}'),
    )]
    #[Response(
        response: 422,
        description: '',
        content: new JsonContent(example: '{"title":"Validation Error","detail":["some field is incorrect","some field is incorrect also"]}'),
    )]
    protected function run(GetShopsRequest $dto): GetShopsResponse
    {
        $entities = $this->busManager->askGetShopsQuery(
            new GetShopsQuery(
                $dto->getShopGroupCode()
            )
        );

        return (new GetShopsResponse())
            ->setItems($this->createItems($entities));
    }

    private function createItems(iterable $entities): array
    {
        $items = [];
        /** @var RelationshipOfStoreGroupsToShopEntity $entity */
        foreach ($entities as $entity) {
            $items[] = (new ShopModel())
                ->setCode($entity->getUfXmlId());
        }

        return $items;
    }
}

<?php

/**
 * This file is generated by architect.
 */

namespace App\Endpoints\Shops\v1;

use App\Bus\BusManager;
use App\UseCase\Command\Import\ImportCommand;
use App\UseCase\Command\Import\ImportConsumerItem;
use App\UseCase\Command\Import\ImportRelationshipOfStoreGroupsToShopItem;
use App\UseCase\Command\Import\ImportShopGroupItem;
use App\ValueObject\ConsumerCode;
use Test\PhpServicesBundle\GrpcAttributes\GrpcService;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\RequestBody;
use OpenApi\Attributes\Response;
use ShopGroups\Shops\v1\AbstractEndpoints\ShopGroupImportFileAbstractEndpoint;
use ShopGroups\Shops\v1\ImportFileRequest;
use ShopGroups\Shops\v1\ImportFileResponse;
use Symfony\Component\Routing\Annotation\Route;

class ShopGroupImportFileEndpoint extends ShopGroupImportFileAbstractEndpoint
{
    public function __construct(
        private BusManager $busManager,
    ) {
    }

    #[GrpcService]
    #[Route('/api/v1/import', name: 'import-shop-group', methods: ['POST'])]
    #[RequestBody(content: new JsonContent(example: '{"ShopGroups":"","Consumers":"","ShopsToShopGroups":""}'))]
    #[Response(response: 200, description: 'OK', content: new JsonContent(example: '{}'))]
    #[Response(
        response: 422,
        description: '',
        content: new JsonContent(example: '{"title":"Validation Error","detail":["some field is incorrect","some field is incorrect also"]}'),
    )]
    protected function run(ImportFileRequest $dto): ImportFileResponse
    {
        $this->busManager->executeImportCommand(
            new ImportCommand(
                $this->createImportConsumersCommand($dto->getConsumers()),
                $this->createImportShopGroupsCommand($dto->getShopGroups()),
                $this->createImportRelationshipOfStoreGroupsToShopCommand($dto->getShopsToShopGroups()),
            )
        );

        return new ImportFileResponse();
    }

    /**
     * @return ImportConsumerItem[]
     */
    private function createImportConsumersCommand(string $csv): array
    {
        return $this->convertCsvRowToCommand(
            $csv,
            static function (array $row) {
                if ($row['code']) {
                    return new ImportConsumerItem(
                        new ConsumerCode($row['code']),
                        $row['title'],
                        $row['description'],
                    );
                }

                return null;
            }
        );
    }

    /**
     * @return ImportShopGroupItem[]
     */
    private function createImportShopGroupsCommand(string $csv): array
    {
        return $this->convertCsvRowToCommand(
            $csv,
            static function (array $row) {
                if ($row['code']) {
                    if (isset($row['consumer_code'])) {
                        $consumers = explode(',', $row['consumer_code']);
                    } else {
                        $consumers = [];
                    }

                    return new ImportShopGroupItem(
                        $row['code'],
                        $row['title'],
                        $row['description'],
                        $row['parent_code'],
                        '1' === trim($row['active']),
                        $row['fias_id'],
                        $consumers
                    );
                }

                return null;
            }
        );
    }

    /**
     * @return ImportRelationshipOfStoreGroupsToShopItem[]
     */
    private function createImportRelationshipOfStoreGroupsToShopCommand(string $csv): array
    {
        return $this->convertCsvRowToCommand(
            $csv,
            static function (array $row) {
                if ($row['uf_xml_id'] && $row['shop_group_code']) {
                    return new ImportRelationshipOfStoreGroupsToShopItem(
                        $row['shop_group_code'],
                        $row['uf_xml_id']
                    );
                }

                return null;
            }
        );
    }

    private function convertCsvRowToCommand(string $csv, callable $converter): array
    {
        $items = [];
        $csv = trim($csv);
        if (str_contains($csv, "\r\n")) {
            $delimeter = "\r\n";
        } else {
            $delimeter = "\n";
        }
        $csvRows = explode($delimeter, $csv);
        $fieldsCodes = array_shift($csvRows);
        $fieldsCodes = str_getcsv($fieldsCodes, ';');

        foreach ($csvRows as $csvRow) {
            if ($csvRow) {
                $row = str_getcsv($csvRow, ';');
                $data = [];
                foreach ($row as $index => $value) {
                    $data[$fieldsCodes[$index]] = $value ?? '';
                }

                if ($item = $converter($data)) {
                    $items[] = $item;
                }
            }
        }

        return $items;
    }
}

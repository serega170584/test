<?php

/**
 * This file is generated by architect.
 */

namespace App\Endpoints\Shops\v1;

use App\Bus\BusManager;
use App\DTO\Query\AllShopGroups\ShopGroup;
use App\UseCase\Query\GetAllShopGroups\GetAllShopGroupsQuery;
use Test\PhpServicesBundle\GrpcAttributes\GrpcService;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\Response;
use ShopGroups\Shops\v1\AbstractEndpoints\ShopGroupGetAllShopGroupsAbstractEndpoint;
use ShopGroups\Shops\v1\AllShopGroup;
use ShopGroups\Shops\v1\GetAllShopGroupsRequest;
use ShopGroups\Shops\v1\GetAllShopGroupsResponse;
use Symfony\Component\Routing\Annotation\Route;

class ShopGroupGetAllShopGroupsEndpoint extends ShopGroupGetAllShopGroupsAbstractEndpoint
{
    public function __construct(
        private readonly BusManager $busManager,
    ) {
    }

    #[GrpcService]
    #[Route('/api/v1/all-shop-groups', methods: ['GET'])]
    #[Response(
        response: 200,
        description: 'OK',
        content: new JsonContent(example: '{"items":[{"code":"","isActive":false,"isDistr":false,"shopCodes":["str1","str2"]},{"code":"","isActive":false,"isDistr":false,"shopCodes":["str1","str2"]}]}'),
    )]
    #[Response(
        response: 422,
        description: '',
        content: new JsonContent(example: '{"title":"Validation Error","detail":["some field is incorrect","some field is incorrect also"]}'),
    )]
    protected function run(GetAllShopGroupsRequest $dto): GetAllShopGroupsResponse
    {
        $shopGroups = $this->busManager->askGetAllShopGroupsQuery(
            new GetAllShopGroupsQuery(
                $dto->getIsShopGroupActive(),
                $dto->getLastShopGroupCode(),
                $dto->getLimit()
            ));

        $items = [];

        /** @var ShopGroup $shopGroup */
        foreach ($shopGroups as $shopGroup) {
            $items[] = (new AllShopGroup())
                ->setCode($shopGroup->getCode())
                ->setIsDistr($shopGroup->isDistr())
                ->setIsActive($shopGroup->isActive())
                ->setShopCodes($shopGroup->getShopCodes());
        }

        return (new GetAllShopGroupsResponse())
            ->setItems($items);
    }
}

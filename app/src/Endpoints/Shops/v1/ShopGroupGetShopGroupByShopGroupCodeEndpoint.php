<?php

/**
 * This file is generated by architect.
 */

namespace App\Endpoints\Shops\v1;

use App\Bus\BusManager;
use App\Entity\ShopGroupEntity;
use App\Exception\NotFoundException;
use App\UseCase\Query\GetShopGroupsByShopGroupCode\GetShopGroupByShopGroupCodeQuery;
use Test\PhpServicesBundle\GrpcAttributes\GrpcService;
use Test\PhpServicesBundle\MessageValidationInterceptor;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\Parameter;
use OpenApi\Attributes\Response;
use ShopGroups\Shops\v1\AbstractEndpoints\ShopGroupGetShopGroupByShopGroupCodeAbstractEndpoint;
use ShopGroups\Shops\v1\GetShopGroupByShopGroupCodeRequest;
use ShopGroups\Shops\v1\GetShopGroupByShopGroupCodeResponse;
use ShopGroups\Shops\v1\ShopGroupModel;
use Symfony\Component\Routing\Annotation\Route;

class ShopGroupGetShopGroupByShopGroupCodeEndpoint extends ShopGroupGetShopGroupByShopGroupCodeAbstractEndpoint
{
    public function __construct(
        private readonly BusManager $busManager,
    ) {
    }

    #[GrpcService]
    #[Route('/api/v1/shop-group-by-shop-group-code', methods: ['GET'])]
    #[MessageValidationInterceptor]
    #[Parameter(name: 'shopGroupCode', description: 'Код группы магазинов (виртуальная группа)', in: 'query', required: true, example: 'shop_group_location_1')]
    #[Response(response: 200, description: 'OK', content: new JsonContent(example: '{"item":null}'))]
    #[Response(
        response: 422,
        description: '',
        content: new JsonContent(example: '{"title":"Validation Error","detail":["some field is incorrect","some field is incorrect also"]}'),
    )]
    protected function run(GetShopGroupByShopGroupCodeRequest $dto): GetShopGroupByShopGroupCodeResponse
    {
        $shopGroupIterator = $this->busManager->askGetShopGroupByShopGroupCodeQuery(
            new GetShopGroupByShopGroupCodeQuery(
                $dto->getShopGroupCode(),
            )
        );

        if (empty($shopGroupIterator->current())) {
            throw new NotFoundException(sprintf('Not found shop group with code [%s]', $dto->getShopGroupCode()));
        }

        return (new GetShopGroupByShopGroupCodeResponse())
            ->setItem($this->createItem($shopGroupIterator->current()));
    }

    private function createItem(ShopGroupEntity $shopGroup): ShopGroupModel
    {
        return (new ShopGroupModel())
            ->setCode($shopGroup->getCode())
            ->setFiasId($shopGroup->getFiasId());
    }
}
